{
  let summer:string = 'summer'
  console.log(summer.endsWith('u'))
}

// 01、TS是JS的超集，TS相比于JS多了类型系统也会有更加清晰的编码提示，声明变量或者函数需要添加类型注解（变量：类型）
// 02、TS的类型都是小写字母，初次声明变量不进行类型注解则会进行类型推断，后续赋值必须符合类型推断的值
// 03、TS是强类型语言，编译时进行类型检查（静态）；JS是弱类型语言，执行时进行检查（动态）

// 04、TS单文件先编译生成JS单文件，后读取编译后的JS文件指令：
// 04、`tsc TS文件名` + `node JS文件名`（必须全局安装node与typescript，指令 `npm i -g typescript node` ）

// 05、TS单文件直接读取编译后的文件指令（不会在目录中生成JS文件）
// 05、`ts-node TS文件名` （等同于上面两句指令但不会生成JS文件，在安装node与typescript后还必须安装ts-node包：`npm i -g ts-node`）
// 06、只有在单文件中使用ts才需要以上步骤，如果是在TS项目模块中，则无需以上步骤

// 07、生成TS配置文件tsconfig.json的指令：tsc --init
// 08、使用脚手架创建的TS项目无需手动生成TS配置文件

// N1、因为是非模块化项目中使用ts文件，相当于是全局作用域，因此为了确保变量不会受到污染，此处使用{}来进行手动模块划分